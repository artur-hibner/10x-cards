---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Moje Fiszki | 10x Cards">
  <div class="container mx-auto px-4 py-8 max-w-6xl">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Moje Fiszki</h1>
      <p class="text-gray-600">Przeglądaj i zarządzaj swoimi fiszkami</p>
    </div>

    <!-- Panel filtrów i kontroli -->
    <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
      <div class="flex flex-wrap gap-4 items-end">
        <!-- Filtr źródła -->
        <div class="flex-1 min-w-48">
          <label for="source-filter" class="block text-sm font-medium text-gray-700 mb-1">
            Źródło fiszki
          </label>
          <select 
            id="source-filter"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Wszystkie</option>
            <option value="ai-full">AI (pełne)</option>
            <option value="ai-edited">AI (edytowane)</option>
            <option value="manual">Ręczne</option>
          </select>
        </div>

        <!-- Filtr generacji -->
        <div class="flex-1 min-w-48">
          <label for="generation-filter" class="block text-sm font-medium text-gray-700 mb-1">
            ID Generacji
          </label>
          <input 
            type="text" 
            id="generation-filter"
            placeholder="np. 123 lub 'null' dla manualnych"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
        </div>

        <!-- Sortowanie -->
        <div class="flex-1 min-w-48">
          <label for="sort-field" class="block text-sm font-medium text-gray-700 mb-1">
            Sortowanie
          </label>
          <div class="flex gap-2">
            <select 
              id="sort-field"
              class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="created_at">Data utworzenia</option>
              <option value="updated_at">Data modyfikacji</option>
              <option value="front">Przód fiszki</option>
              <option value="back">Tył fiszki</option>
            </select>
            <select 
              id="sort-order"
              class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="desc">↓ Malejąco</option>
              <option value="asc">↑ Rosnąco</option>
            </select>
          </div>
        </div>

        <!-- Liczba na stronę -->
        <div class="min-w-32">
          <label for="limit" class="block text-sm font-medium text-gray-700 mb-1">
            Na stronę
          </label>
          <select 
            id="limit"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="5">5</option>
            <option value="10" selected>10</option>
            <option value="20">20</option>
            <option value="50">50</option>
          </select>
        </div>

        <!-- Przycisk zastosuj -->
        <div>
          <button 
            id="apply-filters"
            class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
          >
            Zastosuj
          </button>
        </div>
      </div>
    </div>

    <!-- Status ładowania -->
    <div id="loading-indicator" class="hidden">
      <div class="text-center py-8">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        <p class="mt-2 text-gray-600">Ładowanie fiszek...</p>
      </div>
    </div>

    <!-- Informacje o wynikach -->
    <div id="results-info" class="mb-4 text-sm text-gray-600 hidden">
    </div>

    <!-- Lista fiszek -->
    <div id="flashcards-container">
      <!-- Fiszki będą tutaj wczytane dynamicznie -->
    </div>

    <!-- Paginacja -->
    <div id="pagination-container" class="mt-8 flex justify-center hidden">
      <!-- Paginacja będzie tutaj -->
    </div>

    <!-- Komunikat błędu -->
    <div id="error-message" class="hidden bg-red-50 border border-red-200 rounded-md p-4 mb-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Błąd</h3>
          <div class="mt-2 text-sm text-red-700" id="error-details">
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    interface FlashcardDTO {
      id: number;
      front: string;
      back: string;
      source: 'ai-full' | 'ai-edited' | 'manual';
      generation_id: number | null;
      created_at: string;
      updated_at: string;
    }

    interface FlashcardsResponse {
      flashcards: FlashcardDTO[];
      pagination: {
        page: number;
        limit: number;
        total: number;
      };
    }

    let currentPage = 1;

    // Funkcja do budowania URL z parametrami
    function buildApiUrl(params: Record<string, string | undefined>): string {
      const url = new URL('/api/flashcards', window.location.origin);
      
      Object.entries(params).forEach(([key, value]) => {
        if (value && value.trim() !== '') {
          url.searchParams.append(key, value);
        }
      });

      return url.toString();
    }

    // Funkcja do pobierania fiszek
    async function fetchFlashcards(page: number = 1): Promise<void> {
      const loadingIndicator = document.getElementById('loading-indicator');
      const flashcardsContainer = document.getElementById('flashcards-container');
      const errorMessage = document.getElementById('error-message');
      const resultsInfo = document.getElementById('results-info');
      const paginationContainer = document.getElementById('pagination-container');

      if (!loadingIndicator || !flashcardsContainer || !errorMessage || !resultsInfo || !paginationContainer) return;

      // Pokaż loading, ukryj błędy
      loadingIndicator.classList.remove('hidden');
      errorMessage.classList.add('hidden');
      flashcardsContainer.innerHTML = '';
      resultsInfo.classList.add('hidden');
      paginationContainer.classList.add('hidden');

      try {
        // Zbieranie parametrów z formularza
        const sourceFilter = (document.getElementById('source-filter') as HTMLSelectElement)?.value;
        const generationFilter = (document.getElementById('generation-filter') as HTMLInputElement)?.value;
        const sortField = (document.getElementById('sort-field') as HTMLSelectElement)?.value;
        const sortOrder = (document.getElementById('sort-order') as HTMLSelectElement)?.value;
        const limit = (document.getElementById('limit') as HTMLSelectElement)?.value;

        const params = {
          page: page.toString(),
          limit: limit || '10',
          sort: sortField || 'created_at',
          order: sortOrder || 'desc',
          source: sourceFilter,
          generation_id: generationFilter
        };

        const url = buildApiUrl(params);
        console.log('Fetching:', url);

        const response = await fetch(url);
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `HTTP ${response.status}`);
        }

        const data: FlashcardsResponse = await response.json();
        
        // Ukryj loading
        loadingIndicator.classList.add('hidden');
        
        // Wyświetl informacje o wynikach
        resultsInfo.innerHTML = `
          Znaleziono <strong>${data.pagination.total}</strong> fiszek. 
          Strona <strong>${data.pagination.page}</strong> z <strong>${Math.ceil(data.pagination.total / data.pagination.limit)}</strong>
        `;
        resultsInfo.classList.remove('hidden');

        // Wyświetl fiszki
        if (data.flashcards.length === 0) {
          flashcardsContainer.innerHTML = `
            <div class="text-center py-12 text-gray-500">
              <p class="text-lg">Brak fiszek spełniających kryteria</p>
              <p class="text-sm mt-2">Spróbuj zmienić filtry lub dodaj nowe fiszki</p>
            </div>
          `;
        } else {
          flashcardsContainer.innerHTML = data.flashcards.map(flashcard => `
            <div class="bg-white rounded-lg shadow-sm border p-6 mb-4">
              <div class="flex justify-between items-start mb-4">
                <div class="flex-1">
                  <div class="flex items-center gap-2 mb-2">
                    <span class="text-xs px-2 py-1 rounded-full ${getSourceBadgeClass(flashcard.source)}">
                      ${getSourceLabel(flashcard.source)}
                    </span>
                    ${flashcard.generation_id ? `<span class="text-xs text-gray-500">#${flashcard.generation_id}</span>` : ''}
                  </div>
                  <h3 class="font-medium text-gray-900 mb-2">
                    <span class="text-gray-500 text-sm">Przód:</span> ${escapeHtml(flashcard.front)}
                  </h3>
                </div>
                <div class="text-xs text-gray-500 text-right">
                  <div>ID: ${flashcard.id}</div>
                  <div>Utworzono: ${formatDate(flashcard.created_at)}</div>
                  ${flashcard.updated_at !== flashcard.created_at ? `<div>Zaktualizowano: ${formatDate(flashcard.updated_at)}</div>` : ''}
                </div>
              </div>
              
              <div class="bg-gray-50 p-4 rounded-md">
                <p class="text-gray-900">
                  <span class="text-gray-500 text-sm">Tył:</span><br>
                  ${escapeHtml(flashcard.back).replace(/\n/g, '<br>')}
                </p>
              </div>
            </div>
          `).join('');
        }

        // Wyświetl paginację
        if (data.pagination.total > data.pagination.limit) {
          const totalPages = Math.ceil(data.pagination.total / data.pagination.limit);
          currentPage = data.pagination.page;
          
          let paginationHtml = '<div class="flex gap-2 items-center">';
          
          // Poprzednia strona
          if (currentPage > 1) {
            paginationHtml += `<button onclick="goToPage(${currentPage - 1})" class="px-3 py-2 text-blue-600 hover:bg-blue-50 rounded-md border">Poprzednia</button>`;
          }
          
          // Numery stron
          for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
            const isActive = i === currentPage;
            paginationHtml += `
              <button 
                onclick="goToPage(${i})" 
                class="px-3 py-2 rounded-md border ${isActive ? 'bg-blue-600 text-white' : 'text-blue-600 hover:bg-blue-50'}"
              >
                ${i}
              </button>
            `;
          }
          
          // Następna strona
          if (currentPage < totalPages) {
            paginationHtml += `<button onclick="goToPage(${currentPage + 1})" class="px-3 py-2 text-blue-600 hover:bg-blue-50 rounded-md border">Następna</button>`;
          }
          
          paginationHtml += '</div>';
          paginationContainer.innerHTML = paginationHtml;
          paginationContainer.classList.remove('hidden');
        }

      } catch (error) {
        loadingIndicator.classList.add('hidden');
        errorMessage.classList.remove('hidden');
        const errorDetails = document.getElementById('error-details');
        if (errorDetails) {
          errorDetails.textContent = error instanceof Error ? error.message : 'Nieznany błąd';
        }
        console.error('Error fetching flashcards:', error);
      }
    }

    // Funkcja do przejścia na konkretną stronę
    function goToPage(page: number): void {
      fetchFlashcards(page);
    }

    // Funkcje pomocnicze
    function getSourceBadgeClass(source: string): string {
      switch (source) {
        case 'ai-full': return 'bg-blue-100 text-blue-800';
        case 'ai-edited': return 'bg-purple-100 text-purple-800';
        case 'manual': return 'bg-green-100 text-green-800';
        default: return 'bg-gray-100 text-gray-800';
      }
    }

    function getSourceLabel(source: string): string {
      switch (source) {
        case 'ai-full': return 'AI (pełne)';
        case 'ai-edited': return 'AI (edytowane)';
        case 'manual': return 'Ręczne';
        default: return source;
      }
    }

    function formatDate(dateString: string): string {
      return new Date(dateString).toLocaleString('pl-PL');
    }

    function escapeHtml(text: string): string {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
      // Załaduj fiszki przy starcie
      fetchFlashcards(1);

      // Obsługa przycisku "Zastosuj"
      const applyButton = document.getElementById('apply-filters');
      if (applyButton) {
        applyButton.addEventListener('click', () => {
          fetchFlashcards(1);
        });
      }

      // Obsługa Enter w polach input
      document.getElementById('generation-filter')?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          fetchFlashcards(1);
        }
      });
    });

    // Dodaj funkcję do globalnego scope dla paginacji
    (window as any).goToPage = goToPage;
  </script>
</Layout> 