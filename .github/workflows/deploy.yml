name: Deploy to DigitalOcean

on:
  # Uruchomienie manualne
  workflow_dispatch:
  # Uruchomienie po udanym CI na main branch
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    name: Deploy do DigitalOcean
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    env:
      NODE_ENV: production

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Odczytaj wersję Node.js z .nvmrc
        id: nvmrc
        run: echo "node_version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Skonfiguruj Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.node_version }}
          cache: "npm"

      - name: Zainstaluj dependencje
        run: npm ci

      - name: Build aplikacji
        run: npm run build
        env:
          # Tutaj można dodać zmienne środowiskowe dla Supabase
          # SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          # SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NODE_ENV: production

      - name: Upload artefaktów build
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 30

      # Ten step wymagałby konfiguracji specificznej dla DigitalOcean
      # Np. DigitalOcean App Platform, Docker registry lub rsync
      - name: Info o deploymencie
        run: |
          echo "🚀 Build został przygotowany do deployment"
          echo "📁 Artefakty są dostępne w artifact 'production-build'"
          echo "🔧 Skonfiguruj deployment do DigitalOcean zgodnie z wybraną metodą:"
          echo "   - App Platform: użyj GitHub integration"
          echo "   - Droplet: użyj rsync lub scp"
          echo "   - Container Registry: zbuduj i wypchnij Docker image"
