name: Deploy to Cloudflare Pages

on:
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  lint:
    name: Lintowanie kodu
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Odczytaj wersję Node.js z .nvmrc
        id: nvmrc
        run: echo "node_version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Skonfiguruj Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.node_version }}
          cache: "npm"

      - name: Zainstaluj dependencje
        run: npm ci

      - name: Lint kod
        run: npm run lint

  unit-test:
    name: Testy jednostkowe
    runs-on: ubuntu-latest
    needs: lint

    env:
      NODE_ENV: test
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Odczytaj wersję Node.js z .nvmrc
        id: nvmrc
        run: echo "node_version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Skonfiguruj Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.node_version }}
          cache: "npm"

      - name: Zainstaluj dependencje
        run: npm ci

      - name: Sprawdź TypeScript
        run: |
          npx astro sync
          npx tsc --noEmit
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Uruchom testy jednostkowe
        run: npm run test -- --run
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  build:
    name: Build aplikacji
    runs-on: ubuntu-latest
    needs: [lint, unit-test]

    env:
      NODE_ENV: production
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Odczytaj wersję Node.js z .nvmrc
        id: nvmrc
        run: echo "node_version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Skonfiguruj Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.node_version }}
          cache: "npm"

      - name: Zainstaluj dependencje
        run: npm ci

      - name: Build aplikacji
        run: npm run build
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

  deploy:
    name: Deploy do Cloudflare Pages
    runs-on: ubuntu-latest
    needs: build
    environment: production

    env:
      NODE_ENV: production

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Deploy do Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=10x-cards --branch main
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}