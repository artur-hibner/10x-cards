name: Pull Request CI

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lintowanie kodu
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Odczytaj wersję Node.js z .nvmrc
        id: nvmrc
        run: echo "node_version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Skonfiguruj Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.node_version }}
          cache: "npm"

      - name: Zainstaluj dependencje
        run: npm ci

      - name: Lint kod
        run: npm run lint

  unit-test:
    name: Testy jednostkowe
    runs-on: ubuntu-latest
    needs: lint

    env:
      NODE_ENV: test

    steps:
      - name: Checkout kod
        uses: actions/checkout@v4

      - name: Odczytaj wersję Node.js z .nvmrc
        id: nvmrc
        run: echo "node_version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      - name: Skonfiguruj Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvmrc.outputs.node_version }}
          cache: "npm"

      - name: Zainstaluj dependencje
        run: npm ci

      - name: Sprawdź TypeScript
        run: npx tsc --noEmit
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

      - name: Uruchom testy jednostkowe
        run: npm run test -- --run

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  status-comment:
    name: Komentarz statusu
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
    if: always() && needs.lint.result == 'success' && needs.unit-test.result == 'success'

    steps:
      - name: Skomentuj PR z pozytywnym statusem
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🚀 Pull Request CI Status')
            );

            const successMessage = `🚀 **Pull Request CI Status**

            ✅ **Wszystkie testy przeszły pomyślnie!**

            **Wykonane zadania:**
            - ✅ Lintowanie kodu
            - ✅ Testy jednostkowe

            **Twój kod jest gotowy do review!** 🎉`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: successMessage
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: successMessage
              });
            }

  status-comment-failure:
    name: Komentarz o błędzie
    runs-on: ubuntu-latest
    needs: [lint, unit-test]
    if: always() && (needs.lint.result == 'failure' || needs.unit-test.result == 'failure')

    steps:
      - name: Skomentuj PR z negatywnym statusem
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🚀 Pull Request CI Status')
            );

            const lintStatus = '${{ needs.lint.result }}' === 'success' ? '✅' : '❌';
            const testStatus = '${{ needs.unit-test.result }}' === 'success' ? '✅' : '❌';

            const failureMessage = `🚀 **Pull Request CI Status**

            ❌ **Niektóre testy nie przeszły pomyślnie**

            **Status zadań:**
            - ${lintStatus} Lintowanie kodu
            - ${testStatus} Testy jednostkowe

            **Sprawdź szczegóły w zakładce Actions i popraw błędy przed mergem.**`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: failureMessage
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: failureMessage
              });
            }
